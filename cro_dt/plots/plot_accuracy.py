import matplotlib.pyplot as plt
import numpy as np
import pdb
from cycler import cycler


if __name__ == "__main__":
    plt.rcParams['axes.prop_cycle'] = cycler(color='bgrcmyk')
    mode = "training"

    if mode == "training":
        data_OCT = None
        data_CART = np.array([[0.957, 0.779, 0.911, 0.704, 0.899, 1.0, 0.764, 0.922, 0.800, 0.251, 0.553, 0.505, 0.566, 0.519],
            [0.968, 0.780, 0.935, 0.749, 1.0, 1.0, 0.781, 0.938, 0.867, 0.350, 0.770, 0.531, 0.581, 0.529],
            [0.972, 0.849, 0.957, 0.810, 1.0, 1.0, 0.797, 0.950, 0.918, 0.544, 0.809, 0.544, 0.598, 0.534]])
        data_C45 = np.array([[0.951, 0.791, 0.903, 0.663, 0.995, 1.0, 0.770, 0.921, 0.800, 0.262, 0.605, 0.511, 0.561, 0.497],
            [0.973, 0.866, 0.934, 0.675, 1.0, 1.0, 0.780, 0.942, 0.891, 0.291, 0.637, 0.515, 0.576, 0.501],
            [0.995, 0.888, 0.995, 0.718, 1.0, 1.0, 0.796, 0.990, 0.984, 0.317, 0.646, 0.522, 0.590, 0.507]])
        data_GOSDT = np.array([[0.967, 0.7, 0.928, 0.739, 0.932, 1.0, 0.776, 0.915, 0.773, 0.362, 0.623, 0.508, 0.523, 0.471],
            [0.979, 0.822, 0.984, 0.799, 1.0, 1.0, 0.814, 0.953, 0.922, 0.609, 0.778, 0.536, 0.535, 0.477],
            [0.985, 0.874, 0.996, 0.858, 1.0, 1.0, 0.823, 0.960, 0.948, 0.653, 0.653, 0.546, 0.547, 0.484]])
        data_TAO = np.array([[0.963, 0.779, 0.917, 0.715, 0.918, 1.0, 0.773, 0.935, 0.847, 0.318, 0.656, 0.512, 0.572, 0.525],
            [0.976, 0.801, 0.960, 0.780, 1.0, 1.0, 0.799, 0.960, 0.933, 0.510, 0.786, 0.541, 0.611, 0.540],
            [0.983, 0.851, 0.983, 0.841, 1.0, 1.0, 0.816, 0.979, 0.975, 0.672, 0.840, 0.567, 0.648, 0.560]])
        data_CRODT = np.array([[0.939, 0.776, 0.885, 0.692, 1.0, 1.0, 0.759, 0.915, 0.728, 0.344, 0.569, 0.536, 0.510, 0.483],
            [0.941, 0.805, 0.915, 0.726, 1.0, 1.0, 0.756, 0.905, 0.714, 0.500, 0.652, 0.569, 0.514, 0.487],
            [0.943, 0.855, 0.945, 0.765, 1.0, 1.0, 0.758, 0.898, 0.726, 0.600, 0.715, 0.594, 0.515, 0.494]])
        data_CRODT_CS = np.array([[0.969, 0.779, 0.925, 0.739, 1.0, 1.0, 0.782, 0.944, 0.857, 0.382, 0.646, 0.538, 0.581, 0.523],
            [0.977, 0.815, 0.946, 0.792, 1.0, 1.0, 0.793, 0.964, 0.915, 0.544, 0.748, 0.572, 0.592, 0.524],
            [0.980, 0.867, 0.974, 0.839, 1.0, 1.0, 0.797, 0.977, 0.938, 0.669, 0.785, 0.601, 0.603, 0.531]])
    elif mode == "test":
        data_OCT = np.array([[0.945, 0.737, 0.901, 0.671, 1.0, 1.0, 0.755, 0.905, 0.712, 0.294],
            [0.953, 0.774, 0.896, 0.689, 1.0, 1.0, 0.770, 0.914, 0.696, 0.416],
            [0.953, 0.788, 0.907, 0.716, 1.0, 1.0, 0.770, 0.914, 0.696, 0.547]])
        data_CART = np.array([[0.938, 0.778, 0.894, 0.647, 0.867, 0.990, 0.761, 0.913, 0.694, 0.250, 0.551, 0.502, 0.552, 0.511],
            [0.947, 0.778, 0.918, 0.688, 1.0, 0.990, 0.765, 0.916, 0.701, 0.346, 0.766, 0.528, 0.553, 0.519],
            [0.947, 0.843, 0.936, 0.749, 1.0, 0.990, 0.771, 0.918, 0.706, 0.532, 0.805, 0.540, 0.559, 0.520]])			
        data_C45 = np.array([[0.931, 0.791, 0.887, 0.615, 0.973, 0.988, 0.754, 0.901, 0.664, 0.258, 0.603, 0.508, 0.544, 0.492],
            [0.946, 0.858, 0.915, 0.618, 0.985, 0.988, 0.751, 0.889, 0.663, 0.283, 0.633, 0.511, 0.548, 0.493],
            [0.944, 0.879, 0.971, 0.639, 0.985, 0.988, 0.744, 0.885, 0.664, 0.303, 0.641, 0.517, 0.547, 0.495]])			
        data_GOSDT = np.array([[0.953, 0.776, 0.911, 0.691, 0.997, 0.989, 0.755, 0.919, 0.695, 0.384, 0.621, 0.505, 0.509, 0.467],
            [0.952, 0.809, 0.965, 0.728, 0.997, 0.989, 0.778, 0.919, 0.712, 0.599, 0.775, 0.530, 0.511, 0.469],
            [0.953, 0.864, 0.978, 0.783, 0.997, 0.989, 0.773, 0.923, 0.716, 0.636, 0.651, 0.537, 0.508, 0.471]])			
        data_TAO = np.array([[0.942, 0.778, 0.898, 0.664, 0.912, 0.990, 0.756, 0.906, 0.687, 0.315, 0.652, 0.510, 0.550, 0.515],
            [0.947, 0.793, 0.949, 0.717, 0.997, 0.990, 0.769, 0.905, 0.709, 0.499, 0.782, 0.536, 0.561, 0.520],
            [0.947, 0.845, 0.966, 0.774, 0.997, 0.990, 0.767, 0.901, 0.709, 0.646, 0.832, 0.558, 0.569, 0.523]])			
        data_CRODT = np.array([[0.939, 0.776, 0.885, 0.692, 1.0, 1.0, 0.759, 0.915, 0.728, 0.344, 0.569, 0.536, 0.510, 0.483],
            [0.941, 0.805, 0.915, 0.726, 1.0, 1.0, 0.756, 0.905, 0.714, 0.500, 0.652, 0.569, 0.514, 0.487],
            [0.943, 0.855, 0.945, 0.765, 1.0, 1.0, 0.758, 0.898, 0.726, 0.600, 0.715, 0.594, 0.515, 0.494]])			
        data_CRODT_CS = np.array([[0.955, 0.775, 0.904, 0.692, 1.0, 0.996, 0.757, 0.913, 0.704, 0.380, 0.644, 0.536, 0.558, 0.514],
            [0.953, 0.803, 0.924, 0.730, 1.0, 1.0, 0.761, 0.911, 0.706, 0.538, 0.743, 0.570, 0.557, 0.509],
            [0.952, 0.861, 0.952, 0.778, 1.0, 0.998, 0.761, 0.907, 0.717, 0.655, 0.779, 0.596, 0.548, 0.507]])


    datasets = ["Breast cancer", "Car evaluation", "Banknote authentication", "Balance scale", 
        "Acute inflammations 1", "Acute inflammations 2", "Blood transfusion", "Climate model crashes",
        "Connectionist bench sonar", "Optical recognition", "Drybeans", "Avila bible", "Wine quality red", "Wine quality white"]

    foobar = lambda res, i : np.array([(x, res[x][i]) for x in range(3)])

    fig, axs = plt.subplots(3, 5, figsize=(14, 6), sharex=True)
    axs[-1, -1].axis('off')
    for i, dataset in enumerate(datasets):
        ax = axs[i//5, i%5]
        x = range(3)

        crodt_cs, = ax.plot(x, data_CRODT_CS[:, i], marker='^', linewidth=3, label="CRO-DT (CS)")
        crodt, = ax.plot(x, data_CRODT[:, i], marker='^', linewidth=3, label="CRO-DT")
        cart, = ax.plot(x, data_CART[:, i], linestyle="--", marker='^', label="CART")
        c45, = ax.plot(x, data_C45[:, i], linestyle="--", marker='^', label="C4.5")
        gosdt, = ax.plot(x, data_GOSDT[:, i], linestyle="--", marker='^', label="GOSDT")
        tao, = ax.plot(x, data_TAO[:, i], linestyle="--", marker='^', label="TAO")
        if data_OCT is not None and i < data_OCT.shape[1]:
            oct, = ax.plot(x, data_OCT[:, i], linestyle="--", marker='^', label="OCT")

        ax.set_xticks([0, 1, 2], ["2", "3", "4"])
        ax.set_title(dataset)
        
        if i >= 2*5 or i == 9:
            ax.set_xlabel("Depth")
        
        if i == 9:
            artists = [cart, c45, oct, gosdt, tao, crodt, crodt_cs]
            labels = ["CART", "C4.5", "OCT", "GOSDT", "TAO", "CRO-DT", "CRO-DT (CS)"]
            ax.legend(handles=artists, labels=labels, bbox_to_anchor=(0.5, -1.4), loc="lower center", fontsize=12)

    axs[1, 0].set_ylabel(f"Average {'in-sample' if mode == 'training' else 'out-of-sample'} accuracy")
    plt.subplots_adjust(top=0.902,
        bottom=0.07,
        left=0.06,
        right=0.983,
        hspace=0.2,
        wspace=0.25)
    plt.suptitle(f"{'In-sample' if mode == 'training' else 'Out-of-sample'} accuracy", fontsize=16)
    plt.show()